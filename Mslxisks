local Players = game:GetService("Players")
local player = Players.LocalPlayer
local targetName = "Part" -- –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
local scanRadius = 10 -- –ú–µ—Ç—Ä—ã

-- 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local function getPlayerRoot()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

-- 2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞
local function deepAnalyze(obj)
    local result = {
        BasicInfo = {
            Name = obj.Name,
            Class = obj.ClassName,
            Id = obj:GetDebugId(),
            Position = obj.Position,
            Size = obj.Size,
            Color = obj.Color,
            Material = obj.Material,
            Transparency = obj.Transparency,
            Anchored = obj.Anchored,
            CanCollide = obj.CanCollide
        },
        Attributes = {},
        Values = {},
        Scripts = {},
        Events = {},
        Connections = {},
        Physics = {},
        Network = {},
        Templates = {}
    }

    -- –ê—Ç—Ä–∏–±—É—Ç—ã
    for attr, value in pairs(obj:GetAttributes()) do
        table.insert(result.Attributes, {
            Name = attr,
            Value = value,
            Type = typeof(value)
        })
    end

    -- Value –æ–±—ä–µ–∫—Ç—ã
    for _, child in ipairs(obj:GetChildren()) do
        if child:IsA("ValueBase") then
            table.insert(result.Values, {
                Name = child.Name,
                Type = child.ClassName,
                Value = child.Value
            })
        end
    end

    -- –°–∫—Ä–∏–ø—Ç—ã –∏ –∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for _, descendant in ipairs(obj:GetDescendants()) do
        if descendant:IsA("Script") then
            local connections = {}
            for _, conn in ipairs(getconnections(descendant.Changed)) do
                table.insert(connections, tostring(conn.Function))
            end
            
            table.insert(result.Scripts, {
                Name = descendant.Name,
                Type = descendant.ClassName,
                Disabled = descendant.Disabled,
                Connections = connections
            })
        end
    end

    -- –°–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    for _, descendant in ipairs(obj:GetDescendants()) do
        if descendant:IsA("RemoteEvent") or descendant:IsA("RemoteFunction") then
            local connections = {}
            for _, conn in ipairs(getconnections(descendant.OnClientEvent)) do
                table.insert(connections, tostring(conn.Function))
            end
            
            table.insert(result.Events, {
                Name = descendant.Name,
                Type = descendant.ClassName,
                Connections = connections
            })
        end
    end

    -- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if obj:FindFirstChildOfClass("TouchTransmitter") then
        table.insert(result.Physics, "TouchTransmitter")
    end
    if obj:FindFirstChildOfClass("ClickDetector") then
        table.insert(result.Physics, "ClickDetector")
    end

    -- –°–µ—Ç–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if obj:FindFirstChild("NetworkOwner") then
        table.insert(result.Network, {
            Type = "NetworkOwner",
            Value = obj.NetworkOwner.Value
        })
    end

    -- –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
    local repStorage = game:GetService("ReplicatedStorage")
    for _, item in ipairs(repStorage:GetDescendants()) do
        if item.Name == obj.Name and item:IsA("BasePart") then
            table.insert(result.Templates, {
                Path = item:GetFullName(),
                Id = item:GetDebugId()
            })
        end
    end

    return result
end

-- 3. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
local function findRelatedObjects(centerPos)
    local related = {}
    
    -- –ò—â–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    local region = Region3.new(
        centerPos - Vector3.new(scanRadius, scanRadius, scanRadius),
        centerPos + Vector3.new(scanRadius, scanRadius, scanRadius)
    )
    local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
    
    for _, part in ipairs(parts) do
        if part.Name == targetName then
            table.insert(related, part)
        end
    end
    
    return related
end

-- 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
local function generateReport(data)
    local report = ""
    
    -- –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    report ..= string.format("üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ [%s]\n", data.BasicInfo.Name)
    report ..= string.format("üÜî ID: %s | –ö–ª–∞—Å—Å: %s\n", data.BasicInfo.Id, data.BasicInfo.Class)
    report ..= string.format("üìç –ü–æ–∑–∏—Ü–∏—è: %s\n", data.BasicInfo.Position)
    report ..= string.format("üìè –†–∞–∑–º–µ—Ä: %s | –ú–∞—Ç–µ—Ä–∏–∞–ª: %s\n\n", data.BasicInfo.Size, data.BasicInfo.Material)
    
    -- –ê—Ç—Ä–∏–±—É—Ç—ã
    report ..= "üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã:\n"
    for _, attr in ipairs(data.Attributes) do
        report ..= string.format("- %s = %s (%s)\n", attr.Name, tostring(attr.Value), attr.Type)
    end
    
    -- Value –æ–±—ä–µ–∫—Ç—ã
    report ..= "\nüî¢ –ó–Ω–∞—á–µ–Ω–∏—è:\n"
    for _, val in ipairs(data.Values) do
        report ..= string.format("- %s (%s) = %s\n", val.Name, val.Type, tostring(val.Value))
    end
    
    -- –°–∫—Ä–∏–ø—Ç—ã
    report ..= "\nüìú –°–∫—Ä–∏–ø—Ç—ã:\n"
    for _, script in ipairs(data.Scripts) do
        report ..= string.format("- %s (%s) %s\n", script.Name, script.Type, script.Disabled and "[Disabled]" or "")
        for _, conn in ipairs(script.Connections) do
            report ..= string.format("  ‚Ü≥ %s\n", conn)
        end
    end
    
    -- –°–æ–±—ã—Ç–∏—è
    report ..= "\nüì° –°–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:\n"
    for _, event in ipairs(data.Events) do
        report ..= string.format("- %s (%s)\n", event.Name, event.Type)
        for _, conn in ipairs(event.Connections) do
            report ..= string.format("  ‚Ü≥ %s\n", conn)
        end
    end
    
    -- –§–∏–∑–∏–∫–∞
    report ..= "\nüñ±Ô∏è –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n"
    for _, phys in ipairs(data.Physics) do
        report ..= string.format("- %s\n", phys)
    end
    
    -- –°–µ—Ç—å
    report ..= "\nüåê –°–µ—Ç–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:\n"
    for _, net in ipairs(data.Network) do
        report ..= string.format("- %s = %s\n", net.Type, tostring(net.Value))
    end
    
    -- –®–∞–±–ª–æ–Ω—ã
    report ..= "\nüì¶ –®–∞–±–ª–æ–Ω—ã:\n"
    for _, template in ipairs(data.Templates) do
        report ..= string.format("- %s (ID: %s)\n", template.Path, template.Id)
    end
    
    return report
end

-- 5. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function runFullAnalysis()
    local root = getPlayerRoot()
    local objects = findRelatedObjects(root.Position)
    
    if #objects == 0 then
        print("‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ", scanRadius, "–º–µ—Ç—Ä–æ–≤")
        return
    end
    
    for _, obj in ipairs(objects) do
        local analysis = deepAnalyze(obj)
        local report = generateReport(analysis)
        
        print(report)
        setclipboard(report)
    end
end

-- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runFullAnalysis()
