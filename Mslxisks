local function getPlayerPosition()
    local player = game:GetService("Players").LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        return player.Character.HumanoidRootPart.Position
    end
    return Vector3.new(0, 0, 0)
end

local function isInRadius(obj, radius)
    local success, part = pcall(function()
        if obj:IsA("BasePart") then
            return obj
        else
            return obj:FindFirstChildOfClass("BasePart") or obj.PrimaryPart
        end
    end)
    
    if not success or not part then return false end
    
    local playerPos = getPlayerPosition()
    return (part.Position - playerPos).Magnitude <= radius
end

local function getDetailedInfo(obj)
    local info = {}
    
    -- Основная информация
    table.insert(info, "=== Object Info ===")
    table.insert(info, string.format("Class: %s", obj.ClassName))
    table.insert(info, string.format("Name: %s", obj.Name))
    table.insert(info, string.format("Full Path: %s", obj:GetFullName()))
    
    -- Позиция и размер
    if obj:IsA("BasePart") then
        table.insert(info, string.format("Position: (%.2f, %.2f, %.2f)", obj.Position.X, obj.Position.Y, obj.Position.Z))
        table.insert(info, string.format("Size: (%.2f, %.2f, %.2f)", obj.Size.X, obj.Size.Y, obj.Size.Z))
    end
    
    -- Свойства
    if obj:IsA("Model") then
        table.insert(info, string.format("Children Count: %d", #obj:GetChildren()))
    elseif obj:IsA("BasePart") then
        table.insert(info, string.format("Material: %s", tostring(obj.Material)))
        table.insert(info, string.format("CanCollide: %s", tostring(obj.CanCollide)))
        table.insert(info, string.format("Anchored: %s", tostring(obj.Anchored)))
    end
    
    -- Расстояние до игрока
    local part = obj:IsA("BasePart") and obj or obj:FindFirstChildOfClass("BasePart") or obj.PrimaryPart
    if part then
        local distance = (part.Position - getPlayerPosition()).Magnitude
        table.insert(info, string.format("Distance: %.2f meters", distance))
    end
    
    return table.concat(info, "\n")
end

local function scanRadius(radius)
    print("\n=== Scanning objects in radius:", radius, "meters ===")
    local count = 0
    
    for _, obj in pairs(workspace:GetDescendants()) do
        if isInRadius(obj, radius) then
            local success, info = pcall(getDetailedInfo, obj)
            if success then
                print("\n" .. info)
                count = count + 1
            else
                print("\n[ERROR] Failed to get info for:", obj:GetFullName())
            end
        end
    end
    
    print("\n=== Scan completed. Found", count, "objects in radius ===")
end

-- Запуск сканирования с радиусом 15 метров
scanRadius(15)

-- Автоматическое сканирование каждые 30 секунд (опционально)
while true do
    wait(30)
    scanRadius(15)
end
