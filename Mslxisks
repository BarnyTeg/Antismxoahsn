local Players = game:GetService("Players")
local player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Настройки логгирования
local MAX_LOG_ENTRIES = 1000
local LOG_INTERVAL = 2 -- секунды
local LOG_TO_CLIPBOARD = true

-- Глобальные переменные
local ActionLog = {}
local LastLogTime = os.time()
local KnownObjects = {}

-- Безопасное выполнение
local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then return nil end
    return result
end

-- Форматирование значений
local function formatValue(value)
    local valueType = typeof(value)
    
    if valueType == "table" then
        return "{...}"
    elseif valueType == "Instance" then
        return value:GetFullName().." ("..value.ClassName..")"
    elseif valueType == "Vector3" then
        return string.format("(%.1f, %.1f, %.1f)", value.X, value.Y, value.Z)
    else
        return tostring(value)
    end
end

-- Логирование события
local function logEvent(category, action, details)
    local timestamp = os.date("%H:%M:%S")
    local entry = string.format("[%s][%s] %s: %s", timestamp, category, action, details)
    
    table.insert(ActionLog, 1, entry)
    if #ActionLog > MAX_LOG_ENTRIES then
        table.remove(ActionLog)
    end
    
    print(entry)
    
    -- Автосохранение
    if os.time() - LastLogTime >= LOG_INTERVAL and LOG_TO_CLIPBOARD then
        safeCall(function()
            setclipboard(table.concat(ActionLog, "\n"))
        end)
        LastLogTime = os.time()
    end
end

-- 1. Мониторинг сетевых событий
local function monitorNetwork()
    local function hookRemote(remote)
        if remote:IsA("RemoteEvent") then
            remote.OnClientEvent:Connect(function(...)
                logEvent("NETWORK", "EVENT: "..remote.Name, remote:GetFullName())
            end)
        elseif remote:IsA("RemoteFunction") then
            local oldInvoke = remote.InvokeServer
            remote.InvokeServer = function(self, ...)
                logEvent("NETWORK", "CALL: "..remote.Name, remote:GetFullName())
                return oldInvoke(self, ...)
            end
        end
    end

    -- Хук существующих объектов
    for _, obj in ipairs(game:GetDescendants()) do
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            hookRemote(obj)
        end
    end

    -- Хук новых объектов
    game.DescendantAdded:Connect(function(obj)
        if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
            hookRemote(obj)
        end
    end)
end

-- 2. Мониторинг инвентаря
local function monitorInventory()
    if not player:FindFirstChild("Backpack") then return end
    
    player.Backpack.ChildAdded:Connect(function(item)
        logEvent("INVENTORY", "ADDED", item.Name.." ("..item.ClassName..")")
    end)
    
    player.Backpack.ChildRemoved:Connect(function(item)
        logEvent("INVENTORY", "REMOVED", item.Name.." ("..item.ClassName..")")
    end)
end

-- 3. Мониторинг персонажа
local function monitorCharacter()
    player.CharacterAdded:Connect(function(character)
        logEvent("CHARACTER", "SPAWNED", character.Name)
        
        local humanoid = character:WaitForChild("Humanoid")
        humanoid:GetPropertyChangedSignal("Health"):Connect(function()
            logEvent("STATS", "HEALTH", humanoid.Health.."/"..humanoid.MaxHealth)
        end)
    end)
end

-- 4. Мониторинг физики
local function monitorPhysics()
    workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("BasePart") then
            obj.Touched:Connect(function(otherPart)
                logEvent("PHYSICS", "COLLISION", obj.Name.." ↔ "..otherPart.Name)
            end)
        end
    end)
end

-- 5. Мониторинг интерфейса
local function monitorGUI()
    local gui = player:WaitForChild("PlayerGui")
    
    local function setupButton(btn)
        if btn:IsA("TextButton") or btn:IsA("ImageButton") then
            btn.MouseButton1Click:Connect(function()
                logEvent("UI", "CLICK", btn:GetFullName())
            end)
        end
    end
    
    for _, element in ipairs(gui:GetDescendants()) do
        setupButton(element)
    end
    
    gui.DescendantAdded:Connect(setupButton)
end

-- Инициализация
monitorNetwork()
monitorInventory()
monitorCharacter()
monitorPhysics()
monitorGUI()

logEvent("SYSTEM", "STARTED", "Ultimate Logger Activated")

-- Автоочистка логов
while true do
    wait(60)
    if #ActionLog > MAX_LOG_ENTRIES * 1.5 then
        for i = #ActionLog, MAX_LOG_ENTRIES, -1 do
            table.remove(ActionLog, i)
        end
    end
end
