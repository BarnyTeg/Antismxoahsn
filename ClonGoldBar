local Players = game:GetService("Players")
local player = Players.LocalPlayer
local targetName = "Part" -- –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
local scanRadius = 10 -- –ú–µ—Ç—Ä—ã

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∞—Ç—Ä–∏–±—É—Ç–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
local function getAttributeId(obj, attrName)
    local success, attrId = pcall(function()
        return tostring(obj:GetAttribute(attrName)).." | ID: "..tostring(obj:GetDebugId()).."_"..attrName
    end)
    return success and attrId or "N/A"
end

-- –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å ID –∞—Ç—Ä–∏–±—É—Ç–æ–≤
local function analyzeObjectWithIds(obj)
    local result = {
        Object = obj,
        ObjectId = obj:GetDebugId(),
        Attributes = {},
        Values = {},
        Scripts = {},
        Remotes = {},
        Physics = {},
        Templates = {}
    }
    
    -- –ê–Ω–∞–ª–∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å ID
    for attrName, _ in pairs(obj:GetAttributes()) do
        table.insert(result.Attributes, {
            Name = attrName,
            Value = obj:GetAttribute(attrName),
            Id = obj:GetDebugId().."_"..attrName -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞—Ç—Ä–∏–±—É—Ç–∞
        })
    end
    
    -- –û—Å—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏–∑ (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
    for _, child in ipairs(obj:GetChildren()) do
        if child:IsA("ValueBase") then
            table.insert(result.Values, {
                Type = child.ClassName,
                Name = child.Name,
                Value = child.Value,
                Id = child:GetDebugId()
            })
        end
    end
    
    for _, descendant in ipairs(obj:GetDescendants()) do
        if descendant:IsA("Script") or descendant:IsA("LocalScript") then
            table.insert(result.Scripts, {
                Type = descendant.ClassName,
                Name = descendant.Name,
                Path = descendant:GetFullName(),
                Id = descendant:GetDebugId()
            })
        elseif descendant:IsA("RemoteEvent") or descendant:IsA("RemoteFunction") then
            table.insert(result.Remotes, {
                Type = descendant.ClassName,
                Name = descendant.Name,
                Path = descendant:GetFullName(),
                Id = descendant:GetDebugId()
            })
        end
    end

    -- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å ID
    local report = string.format(
        "üîç –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ [%s]\n"..
        "üÜî Object ID: %s\n\n"..
        "üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã (%d):\n%s\n\n"..
        "üî¢ –ó–Ω–∞—á–µ–Ω–∏—è (%d):\n%s\n\n"..
        "üìú –°–∫—Ä–∏–ø—Ç—ã (%d):\n%s\n\n"..
        "üì° Remote —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (%d):\n%s\n\n"..
        "üñ±Ô∏è –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (%d):\n%s",
        targetName,
        result.ObjectId,
        #result.Attributes,
        #result.Attributes > 0 and table.concat(
            table.tabulate(result.Attributes, function(i,v)
                return string.format("- %s = %s (ID: %s)", v.Name, tostring(v.Value), v.Id)
            end), "\n") or "–ù–µ—Ç",
        #result.Values,
        #result.Values > 0 and table.concat(
            table.tabulate(result.Values, function(i,v)
                return string.format("- %s (%s) = %s (ID: %s)", v.Name, v.Type, tostring(v.Value), v.Id)
            end), "\n") or "–ù–µ—Ç",
        #result.Scripts,
        #result.Scripts > 0 and table.concat(
            table.tabulate(result.Scripts, function(i,v)
                return string.format("- %s (%s)\n  –ü—É—Ç—å: %s\n  ID: %s", v.Name, v.Type, v.Path, v.Id)
            end), "\n") or "–ù–µ—Ç",
        #result.Remotes,
        #result.Remotes > 0 and table.concat(
            table.tabulate(result.Remotes, function(i,v)
                return string.format("- %s (%s)\n  –ü—É—Ç—å: %s\n  ID: %s", v.Name, v.Type, v.Path, v.Id)
            end), "\n") or "–ù–µ—Ç",
        #result.Physics,
        #result.Physics > 0 and table.concat(result.Physics, "\n") or "–ù–µ—Ç"
    )
    
    return report
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function runAnalysis()
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name == targetName and obj:IsA("BasePart") then
            if (obj.Position - rootPart.Position).Magnitude <= scanRadius then
                local report = analyzeObjectWithIds(obj)
                print(report)
                setclipboard(report)
                return -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            end
        end
    end
    print("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–¥–∏—É—Å–µ "..scanRadius.."–º")
end

-- –ó–∞–ø—É—Å–∫
runAnalysis()
