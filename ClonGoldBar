local Players = game:GetService("Players")
local player = Players.LocalPlayer
local targetName = "Part" -- –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
local scanRadius = 10 -- –ú–µ—Ç—Ä—ã

-- 1. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
local function findTargetObjects(centerPos)
    local found = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name == targetName and obj:IsA("BasePart") then
            if (centerPos - obj.Position).Magnitude <= scanRadius then
                table.insert(found, obj)
            end
        end
    end
    return found
end

-- 2. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞
local function analyzeObject(obj)
    local result = {
        Object = obj,
        Attributes = {},
        Values = {},
        Scripts = {},
        Remotes = {},
        Physics = {},
        Templates = {}
    }
    
    -- –ê—Ç—Ä–∏–±—É—Ç—ã
    for _, attr in pairs(obj:GetAttributes()) do
        table.insert(result.Attributes, {
            Name = attr,
            Value = obj:GetAttribute(attr)
        })
    end
    
    -- Value –æ–±—ä–µ–∫—Ç—ã
    for _, child in ipairs(obj:GetChildren()) do
        if child:IsA("ValueBase") then
            table.insert(result.Values, {
                Type = child.ClassName,
                Name = child.Name,
                Value = child.Value
            })
        end
    end
    
    -- –°–∫—Ä–∏–ø—Ç—ã
    for _, descendant in ipairs(obj:GetDescendants()) do
        if descendant:IsA("Script") or descendant:IsA("LocalScript") then
            table.insert(result.Scripts, {
                Type = descendant.ClassName,
                Name = descendant.Name,
                Path = descendant:GetFullName()
            })
        end
    end
    
    -- Remote —Å–æ–±—ã—Ç–∏—è
    for _, descendant in ipairs(obj:GetDescendants()) do
        if descendant:IsA("RemoteEvent") or descendant:IsA("RemoteFunction") then
            table.insert(result.Remotes, {
                Type = descendant.ClassName,
                Name = descendant.Name,
                Path = descendant:GetFullName()
            })
        end
    end
    
    -- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if obj:FindFirstChildOfClass("ClickDetector") then
        table.insert(result.Physics, "ClickDetector")
    end
    if obj:FindFirstChildOfClass("TouchTransmitter") then
        table.insert(result.Physics, "TouchTransmitter")
    end
    
    -- –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
    local repStorage = game:GetService("ReplicatedStorage")
    for _, item in ipairs(repStorage:GetDescendants()) do
        if item.Name == obj.Name and item:IsA("BasePart") then
            table.insert(result.Templates, item:GetFullName())
        end
    end
    
    return result
end

-- 3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
local function formatReport(data)
    local report = string.format(
        "üîç –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ [%s] (%s)\n\n"..
        "üìå –ü–æ–∑–∏—Ü–∏—è: %s\n\n"..
        "üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã (%d):\n%s\n\n"..
        "üî¢ –ó–Ω–∞—á–µ–Ω–∏—è (%d):\n%s\n\n"..
        "üìú –°–∫—Ä–∏–ø—Ç—ã (%d):\n%s\n\n"..
        "üì° Remote —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (%d):\n%s\n\n"..
        "üñ±Ô∏è –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (%d):\n%s\n\n"..
        "üì¶ –®–∞–±–ª–æ–Ω—ã (%d):\n%s",
        data.Object.Name,
        data.Object:GetDebugId(),
        tostring(data.Object.Position),
        #data.Attributes,
        #data.Attributes > 0 and table.concat(
            table.tabulate(data.Attributes, function(i,v)
                return string.format("- %s = %s", v.Name, tostring(v.Value))
            end), "\n") or "–ù–µ—Ç",
        #data.Values,
        #data.Values > 0 and table.concat(
            table.tabulate(data.Values, function(i,v)
                return string.format("- %s (%s) = %s", v.Name, v.Type, tostring(v.Value))
            end), "\n") or "–ù–µ—Ç",
        #data.Scripts,
        #data.Scripts > 0 and table.concat(
            table.tabulate(data.Scripts, function(i,v)
                return string.format("- %s (%s)\n  –ü—É—Ç—å: %s", v.Name, v.Type, v.Path)
            end), "\n") or "–ù–µ—Ç",
        #data.Remotes,
        #data.Remotes > 0 and table.concat(
            table.tabulate(data.Remotes, function(i,v)
                return string.format("- %s (%s)\n  –ü—É—Ç—å: %s", v.Name, v.Type, v.Path)
            end), "\n") or "–ù–µ—Ç",
        #data.Physics,
        #data.Physics > 0 and table.concat(data.Physics, "\n") or "–ù–µ—Ç",
        #data.Templates,
        #data.Templates > 0 and table.concat(data.Templates, "\n") or "–ù–µ—Ç"
    )
    
    return report
end

-- 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function runAnalysis()
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    
    local targets = findTargetObjects(rootPart.Position)
    if #targets == 0 then
        print("‚ùå –û–±—ä–µ–∫—Ç—ã '"..targetName.."' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ "..scanRadius.."–º")
        return
    end
    
    for _, target in ipairs(targets) do
        local analysis = analyzeObject(target)
        local report = formatReport(analysis)
        
        print(report)
        setclipboard(report)
    end
end

-- –ó–∞–ø—É—Å–∫
runAnalysis()
