local radius = 15 -- радиус сканирования в метрах
local includeChildren = true -- включать ли информацию о дочерних объектах

local function getPlayerPosition()
    local player = game:GetService("Players").LocalPlayer
    return player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") 
        and player.Character.HumanoidRootPart.Position or Vector3.new(0, 0, 0)
end

local function safeGet(callback, default)
    local success, result = pcall(callback)
    return success and result or default
end

local function getExtendedInfo(obj)
    local info = {}
    
    -- Базовые свойства
    table.insert(info, "🔹 Class: "..obj.ClassName)
    table.insert(info, "🔹 Name: "..obj.Name)
    table.insert(info, "🔹 FullPath: "..obj:GetFullName())
    table.insert(info, "🔹 RobloxID: "..tostring(safeGet(function() return obj:GetDebugId() end, "N/A")))
    
    -- Физические свойства
    if obj:IsA("BasePart") then
        table.insert(info, "📏 Position: "..tostring(obj.Position))
        table.insert(info, "📐 Size: "..tostring(obj.Size))
        table.insert(info, "🧱 Material: "..tostring(obj.Material))
        table.insert(info, "🔘 Anchored: "..tostring(obj.Anchored))
        table.insert(info, "💥 CanCollide: "..tostring(obj.CanCollide))
        table.insert(info, "👁️ Transparency: "..tostring(obj.Transparency))
    end
    
    -- Для моделей
    if obj:IsA("Model") then
        table.insert(info, "🧩 PrimaryPart: "..tostring(safeGet(function() return obj.PrimaryPart end, "None")))
        table.insert(info, "🧒 Children: "..#obj:GetChildren())
    end
    
    -- Визуальные свойства
    if obj:IsA("GuiObject") then
        table.insert(info, "🎨 BackgroundColor: "..tostring(obj.BackgroundColor3))
    elseif obj:IsA("BasePart") and obj:FindFirstChildOfClass("Texture") then
        table.insert(info, "🖼️ Textures: "..#obj:GetChildrenOfClass("Texture"))
    end
    
    -- Специфичные свойства
    if obj:IsA("Light") then
        table.insert(info, "💡 Brightness: "..tostring(obj.Brightness))
        table.insert(info, "🌈 Color: "..tostring(obj.Color))
    end
    
    -- Расстояние до игрока
    local rootPart = safeGet(function()
        return obj:IsA("BasePart") and obj or obj:FindFirstChildOfClass("BasePart") or obj.PrimaryPart
    end, nil)
    
    if rootPart then
        local dist = (rootPart.Position - getPlayerPosition()).Magnitude
        table.insert(info, "📏 Distance: "..string.format("%.1f", dist).."m")
    end
    
    -- Дополнительные метаданные
    table.insert(info, "🕒 CreatedTime: "..tostring(safeGet(function() return obj:GetAttribute("CreatedTime") end, "N/A")))
    table.insert(info, "🏷️ Tags: "..tostring(safeGet(function() 
        if game:GetService("CollectionService"):HasTag(obj, "Any") then
            return table.concat(game:GetService("CollectionService"):GetTags(obj), ", ")
        end
        return "None"
    end, "None")))
    
    -- Дочерние объекты (если включено)
    if includeChildren and #obj:GetChildren() > 0 then
        table.insert(info, "\n🧒 Children ("..#obj:GetChildren().."):")
        for i, child in ipairs(obj:GetChildren()) do
            if i <= 5 then -- Ограничиваем количество выводимых дочерних элементов
                table.insert(info, string.format("  %d. %s (%s)", i, child.Name, child.ClassName))
            end
        end
        if #obj:GetChildren() > 5 then
            table.insert(info, string.format("  ... and %d more", #obj:GetChildren() - 5))
        end
    end
    
    return table.concat(info, "\n")
end

local function scanArea()
    local result = {"=== SCAN RESULTS ==="}
    local count = 0
    
    for _, obj in pairs(workspace:GetDescendants()) do
        local rootPart = safeGet(function()
            return obj:IsA("BasePart") and obj or obj:FindFirstChildOfClass("BasePart") or obj.PrimaryPart
        end, nil)
        
        if rootPart and (rootPart.Position - getPlayerPosition()).Magnitude <= radius then
            local info = safeGet(getExtendedInfo, obj, "🚫 Failed to get info for this object")
            table.insert(result, "\n"..info)
            count = count + 1
        end
    end
    
    table.insert(result, string.format("\n=== Found %d objects in %dm radius ===", count, radius))
    
    local output = table.concat(result, "\n")
    setclipboard(output)
    print(output)
    print("\n[SUCCESS] Data copied to clipboard!")
end

-- Первый запуск
scanArea()

-- Автоматическое обновление (по желанию)
while true do
    wait(30)
    scanArea()
end
