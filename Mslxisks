local Players = game:GetService("Players")
local player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

-- Настройки логгирования
local LOG_INTERVAL = 1
local MAX_LOG_LENGTH = 5000
local LOG_TO_CLIPBOARD = true
local LOG_TO_FILE = false

-- Глобальный лог
local ActionLog = {}
local LastLogTime = os.time()

-- Функция для форматирования данных
local function formatValue(value)
    if typeof(value) == "table" then
        return HttpService:JSONEncode(value)
    elseif typeof(value) == "Vector3" then
        return string.format("(%.2f, %.2f, %.2f)", value.X, value.Y, value.Z)
    else
        return tostring(value)
    end
end

-- Логгирование действия
local function logAction(category, action, details)
    local timestamp = os.date("%H:%M:%S")
    local entry = string.format("[%s][%s] %s: %s", timestamp, category, action, details)
    
    table.insert(ActionLog, entry)
    
    if #ActionLog > MAX_LOG_LENGTH then
        table.remove(ActionLog, 1)
    end
    
    if os.time() - LastLogTime >= LOG_INTERVAL then
        local fullLog = table.concat(ActionLog, "\n")
        if LOG_TO_CLIPBOARD then
            pcall(function() setclipboard(fullLog) end)
        end
        if LOG_TO_FILE then
            pcall(function() writefile("action_log.txt", fullLog) end)
        end
        LastLogTime = os.time()
    end
    
    print(entry)
end

-- Безопасный мониторинг свойств
local function trackObject(obj)
    -- Проверяем, поддерживает ли объект свойства
    if not pcall(function() return obj.GetPropertyChangedSignal end) then
        return
    end

    -- Получаем список свойств безопасно
    local success, properties = pcall(function()
        local props = {}
        for _, prop in ipairs(getproperties(obj)) do
            table.insert(props, prop)
        end
        return props
    end)

    if not success then return end

    -- Отслеживаем изменения свойств
    for _, prop in ipairs(properties) do
        if not pcall(function()
            local oldValue = obj[prop]
            obj:GetPropertyChangedSignal(prop):Connect(function()
                local newValue = obj[prop]
                logAction("PROPERTY", "CHANGE", string.format(
                    "%s.%s: %s → %s [ID: %s]",
                    obj.Name, prop, 
                    formatValue(oldValue), 
                    formatValue(newValue),
                    obj:GetDebugId()
                ))
                oldValue = newValue
            end)
        end) then
            -- Игнорируем ошибки
        end
    end
end

-- Мониторинг изменений свойств объектов
local function monitorPropertyChanges()
    -- Отслеживаем новые объекты
    workspace.DescendantAdded:Connect(function(obj)
        pcall(trackObject, obj)
    end)
    
    -- Отслеживаем существующие объекты
    for _, obj in ipairs(workspace:GetDescendants()) do
        pcall(trackObject, obj)
    end
end

-- Остальные функции (monitorInputs, monitorNetwork и т.д.) остаются без изменений
-- ...

-- Запуск мониторов с обработкой ошибок
local function safeStart()
    local monitors = {
        monitorInputs,
        monitorPropertyChanges,
        monitorNetwork,
        monitorInventory,
        monitorScripts,
        monitorPhysics
    }
    
    for _, monitor in ipairs(monitors) do
        pcall(monitor)
    end
end

safeStart()
logAction("SYSTEM", "START", "Мониторинг активирован. Все действия записываются.")
