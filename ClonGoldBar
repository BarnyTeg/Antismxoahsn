local Players = game:GetService("Players")
local player = Players.LocalPlayer
local targetName = "Part" -- –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–∞–∑–µ—Ç–∞)
local scanRadius = 10 -- –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–µ–π (–º–µ—Ç—Ä—ã)

-- –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ —Ä–∞–¥–∏—É—Å–µ
local function findTargetObjects(centerPos)
    local found = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name == targetName and obj:IsA("BasePart") then
            if (obj.Position - centerPos).Magnitude <= scanRadius then
                table.insert(found, obj)
            end
        end
    end
    return found
end

-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤—è–∑–∏ –æ–±—ä–µ–∫—Ç–∞
local function analyzeObjectConnections(obj)
    local connections = {}
    
    -- 1. –ü–æ–∏—Å–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    local attachedScripts = {}
    for _, descendant in ipairs(obj:GetDescendants()) do
        if descendant:IsA("Script") or descendant:IsA("LocalScript") then
            table.insert(attachedScripts, {
                Type = descendant.ClassName,
                Name = descendant.Name,
                Path = descendant:GetFullName()
            })
        end
    end
    
    -- 2. –ü–æ–∏—Å–∫ RemoteEvent/RemoteFunction
    local remoteConnections = {}
    for _, descendant in ipairs(obj:GetDescendants()) do
        if descendant:IsA("RemoteEvent") then
            table.insert(remoteConnections, {
                Type = "RemoteEvent",
                Name = descendant.Name,
                Path = descendant:GetFullName()
            })
        elseif descendant:IsA("RemoteFunction") then
            table.insert(remoteConnections, {
                Type = "RemoteFunction",
                Name = descendant.Name,
                Path = descendant:GetFullName()
            })
        end
    end
    
    -- 3. –ü–æ–∏—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ Touched/ClickDetector
    local physicalConnections = {}
    if obj:FindFirstChildOfClass("ClickDetector") then
        table.insert(physicalConnections, "ClickDetector")
    end
    if obj:FindFirstChildOfClass("TouchTransmitter") then
        table.insert(physicalConnections, "TouchTransmitter")
    end
    
    -- 4. –ü–æ–∏—Å–∫ –≤ ReplicatedStorage (–≤–æ–∑–º–æ–∂–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã)
    local templateLinks = {}
    local repStorage = game:GetService("ReplicatedStorage")
    for _, item in ipairs(repStorage:GetDescendants()) do
        if item.Name == obj.Name and item:IsA("BasePart") then
            table.insert(templateLinks, item:GetFullName())
        end
    end
    
    return {
        Scripts = attachedScripts,
        Remotes = remoteConnections,
        Physics = physicalConnections,
        Templates = templateLinks,
        ObjectId = obj:GetDebugId()
    }
end

-- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
local function formatReport(data)
    local report = "üîç –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ ["..targetName.."] ("..data.ObjectId..")\n\n"
    
    report ..= "üìú –°–∫—Ä–∏–ø—Ç—ã ("..#data.Scripts.."):\n"
    for _, script in ipairs(data.Scripts) do
        report ..= string.format("- %s (%s)\n  –ü—É—Ç—å: %s\n", script.Name, script.Type, script.Path)
    end
    
    report ..= "\nüì° Remote —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ("..#data.Remotes.."):\n"
    for _, remote in ipairs(data.Remotes) do
        report ..= string.format("- %s (%s)\n  –ü—É—Ç—å: %s\n", remote.Name, remote.Type, remote.Path)
    end
    
    report ..= "\nüñ±Ô∏è –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ("..#data.Physics.."):\n"
    for _, phys in ipairs(data.Physics) do
        report ..= "- "..phys.."\n"
    end
    
    report ..= "\nüì¶ –®–∞–±–ª–æ–Ω—ã –≤ ReplicatedStorage ("..#data.Templates.."):\n"
    for _, template in ipairs(data.Templates) do
        report ..= "- "..template.."\n"
    end
    
    return report
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function analyzeNearbyObjects()
    if not player.Character then return end
    
    local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    local targets = findTargetObjects(rootPart.Position)
    if #targets == 0 then
        print("‚ùå –û–±—ä–µ–∫—Ç—ã '"..targetName.."' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ "..scanRadius.."–º")
        return
    end
    
    for _, target in ipairs(targets) do
        local analysis = analyzeObjectConnections(target)
        local report = formatReport(analysis)
        
        print(report)
        setclipboard(report) -- –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    end
end

-- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeNearbyObjects()
