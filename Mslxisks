local Players = game:GetService("Players")
local player = Players.LocalPlayer
local targetName = "Part" -- –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
local scanRadius = 10 -- –ú–µ—Ç—Ä—ã

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vector3
local function formatVector(vec)
    return string.format("(%.2f, %.2f, %.2f)", vec.X, vec.Y, vec.Z)
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π —á–∞—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
local function getPlayerRoot()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

-- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞
local function deepAnalyze(obj)
    local result = {
        Basic = {
            Name = obj.Name,
            Class = obj.ClassName,
            Id = obj:GetDebugId(),
            Position = formatVector(obj.Position),
            Size = formatVector(obj.Size),
            Color = string.format("(%.2f, %.2f, %.2f)", obj.Color.R, obj.Color.G, obj.Color.B),
            Material = obj.Material.Name,
            Transparency = obj.Transparency,
            Anchored = obj.Anchored,
            CanCollide = obj.CanCollide,
            Mass = obj:GetMass(),
            Shape = obj.Shape.Name,
            Reflectance = obj.Reflectance,
            Elasticity = obj.Elasticity,
            Friction = obj.Friction
        },
        Attributes = {},
        Values = {},
        Scripts = {},
        Physics = {},
        Network = {},
        Templates = {},
        Connections = {}
    }

    -- –ê–Ω–∞–ª–∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    for attr, value in pairs(obj:GetAttributes()) do
        table.insert(result.Attributes, {
            Name = attr,
            Value = tostring(value),
            Type = typeof(value),
            Id = obj:GetDebugId().."_"..attr -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞—Ç—Ä–∏–±—É—Ç–∞
        })
    end

    -- –ê–Ω–∞–ª–∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    for _, child in ipairs(obj:GetChildren()) do
        -- Value-–æ–±—ä–µ–∫—Ç—ã
        if child:IsA("ValueBase") then
            table.insert(result.Values, {
                Name = child.Name,
                Type = child.ClassName,
                Value = tostring(child.Value),
                Id = child:GetDebugId()
            })
        end
        
        -- –°–µ—Ç–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if child:IsA("RemoteEvent") or child:IsA("RemoteFunction") then
            table.insert(result.Network, {
                Name = child.Name,
                Type = child.ClassName,
                Id = child:GetDebugId()
            })
        end
        
        -- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if child:IsA("BodyMover") then
            table.insert(result.Physics, {
                Name = child.Name,
                Type = child.ClassName,
                Id = child:GetDebugId()
            })
        end
    end

    -- –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    for _, script in ipairs(obj:GetDescendants()) do
        if script:IsA("Script") or script:IsA("LocalScript") then
            local connections = {}
            
            -- –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç Synapse X –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏)
            pcall(function()
                for _, conn in ipairs(getconnections(script.Changed)) do
                    table.insert(connections, tostring(conn.Function))
                end
            end)
            
            table.insert(result.Scripts, {
                Name = script.Name,
                Type = script.ClassName,
                Disabled = script.Disabled,
                Source = script.Enabled and script.Source or "[disabled]",
                Connections = connections,
                Id = script:GetDebugId()
            })
        end
    end

    -- –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    local repStorage = game:GetService("ReplicatedStorage")
    for _, item in ipairs(repStorage:GetDescendants()) do
        if item.Name == obj.Name and item:IsA("BasePart") then
            local templateInfo = {
                Path = item:GetFullName(),
                Id = item:GetDebugId(),
                Size = formatVector(item.Size),
                Material = item.Material.Name
            }
            table.insert(result.Templates, templateInfo)
        end
    end

    return result
end

-- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
local function generateEnhancedReport(data)
    local report = ""
    
    -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
    report ..= string.format("üîç –£–ì–õ–£–ë–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ö–¢–ê [%s]\n", data.Basic.Name)
    report ..= string.rep("=", 50) .. "\n"
    
    -- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    report ..= "üìå –û–°–ù–û–í–ù–´–ï –°–í–û–ô–°–¢–í–ê:\n"
    report ..= string.format("üÜî ID: %s\n", data.Basic.Id)
    report ..= string.format("üìç –ü–æ–∑–∏—Ü–∏—è: %s\n", data.Basic.Position)
    report ..= string.format("üìè –†–∞–∑–º–µ—Ä: %s | –§–æ—Ä–º–∞: %s\n", data.Basic.Size, data.Basic.Shape)
    report ..= string.format("üé® –¶–≤–µ—Ç: %s | –ú–∞—Ç–µ—Ä–∏–∞–ª: %s\n", data.Basic.Color, data.Basic.Material)
    report ..= string.format("‚öñÔ∏è –ú–∞—Å—Å–∞: %.2f | –û—Ç—Ä–∞–∂–µ–Ω–∏–µ: %.2f\n", data.Basic.Mass, data.Basic.Reflectance)
    report ..= string.format("üîò Anchored: %s | CanCollide: %s\n", 
        data.Basic.Anchored and "–î–∞" or "–ù–µ—Ç", 
        data.Basic.CanCollide and "–î–∞" or "–ù–µ—Ç")
    report ..= string.format("üåÄ –£–ø—Ä—É–≥–æ—Å—Ç—å: %.2f | –¢—Ä–µ–Ω–∏–µ: %.2f\n\n", 
        data.Basic.Elasticity, data.Basic.Friction)
    
    -- –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    local sections = {
        {title = "üè∑Ô∏è –ê–¢–†–ò–ë–£–¢–´", data = data.Attributes, func = function(item)
            return string.format("- %s = %s (%s) [ID: %s]", 
                item.Name, item.Value, item.Type, item.Id)
        end},
        
        {title = "üî¢ –ó–ù–ê–ß–ï–ù–ò–Ø", data = data.Values, func = function(item)
            return string.format("- %s (%s) = %s [ID: %s]", 
                item.Name, item.Type, item.Value, item.Id)
        end},
        
        {title = "üìú –°–ö–†–ò–ü–¢–´", data = data.Scripts, func = function(item)
            local conns = #item.Connections > 0 and 
                string.format(" [–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d]", #item.Connections) or ""
            return string.format("- %s (%s)%s\n   ID: %s\n   %s", 
                item.Name, item.Type, conns, item.Id,
                item.Disabled and "[DISABLED]" or item.Source:sub(1, 100).."...")
        end},
        
        {title = "üåê –°–ï–¢–ï–í–´–ï –û–ë–™–ï–ö–¢–´", data = data.Network, func = function(item)
            return string.format("- %s (%s) [ID: %s]", 
                item.Name, item.Type, item.Id)
        end},
        
        {title = "‚öôÔ∏è –§–ò–ó–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´", data = data.Physics, func = function(item)
            return string.format("- %s (%s) [ID: %s]", 
                item.Name, item.Type, item.Id)
        end},
        
        {title = "üì¶ –®–ê–ë–õ–û–ù–´", data = data.Templates, func = function(item)
            return string.format("- %s\n   ID: %s | –†–∞–∑–º–µ—Ä: %s | –ú–∞—Ç–µ—Ä–∏–∞–ª: %s", 
                item.Path, item.Id, item.Size, item.Material)
        end}
    }
    
    -- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
    for _, section in ipairs(sections) do
        if #section.data > 0 then
            report ..= "\n" .. section.title .. ":\n"
            for _, item in ipairs(section.data) do
                report ..= section.func(item) .. "\n"
            end
        else
            report ..= "\n" .. section.title .. ": –ù–µ—Ç\n"
        end
    end
    
    return report
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
local function runDeepAnalysis()
    local root = getPlayerRoot()
    local region = Region3.new(
        root.Position - Vector3.new(scanRadius, scanRadius, scanRadius),
        root.Position + Vector3.new(scanRadius, scanRadius, scanRadius)
    )
    local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
    
    local found = false
    for _, part in ipairs(parts) do
        if part.Name == targetName then
            local data = deepAnalyze(part)
            local report = generateEnhancedReport(data)
            
            print(report)
            setclipboard(report)
            found = true
            
            -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            break
        end
    end
    
    if not found then
        print("‚ùå –û–±—ä–µ–∫—Ç—ã '"..targetName.."' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ "..scanRadius.."–º")
    end
end

-- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runDeepAnalysis()
