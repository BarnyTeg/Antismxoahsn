local Players = game:GetService("Players")
local player = Players.LocalPlayer
local scanRadius = 10 -- –ú–µ—Ç—Ä—ã

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vector3
local function formatVector(vec)
    return string.format("(%.2f, %.2f, %.2f)", vec.X, vec.Y, vec.Z)
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π —á–∞—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
local function getPlayerRoot()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

-- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞
local function deepAnalyze(obj)
    local result = {
        Basic = {
            Name = obj.Name,
            Class = obj.ClassName,
            Id = obj:GetDebugId(),
            Position = obj:IsA("BasePart") and formatVector(obj.Position) or "N/A",
            Size = obj:IsA("BasePart") and formatVector(obj.Size) or "N/A",
            Parent = obj.Parent and obj.Parent.Name or "nil"
        },
        Attributes = {},
        Values = {},
        Scripts = {},
        Physics = {},
        Network = {},
        Templates = {},
        Connections = {}
    }

    -- –ê–Ω–∞–ª–∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    for attr, value in pairs(obj:GetAttributes()) do
        table.insert(result.Attributes, {
            Name = attr,
            Value = tostring(value),
            Type = typeof(value),
            Id = obj:GetDebugId().."_"..attr
        })
    end

    -- –ê–Ω–∞–ª–∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    for _, child in ipairs(obj:GetChildren()) do
        -- Value-–æ–±—ä–µ–∫—Ç—ã
        if child:IsA("ValueBase") then
            table.insert(result.Values, {
                Name = child.Name,
                Type = child.ClassName,
                Value = tostring(child.Value),
                Id = child:GetDebugId()
            })
        end
        
        -- –°–µ—Ç–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if child:IsA("RemoteEvent") or child:IsA("RemoteFunction") then
            table.insert(result.Network, {
                Name = child.Name,
                Type = child.ClassName,
                Id = child:GetDebugId()
            })
        end
        
        -- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if child:IsA("BodyMover") then
            table.insert(result.Physics, {
                Name = child.Name,
                Type = child.ClassName,
                Id = child:GetDebugId()
            })
        end
    end

    -- –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è Script/LocalScript)
    if obj:IsA("Script") or obj:IsA("LocalScript") then
        result.Scripts = {
            {
                Name = obj.Name,
                Type = obj.ClassName,
                Disabled = obj.Disabled,
                Id = obj:GetDebugId()
            }
        }
    end

    -- –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –≤ ReplicatedStorage
    if obj:IsA("BasePart") then
        local repStorage = game:GetService("ReplicatedStorage")
        for _, item in ipairs(repStorage:GetDescendants()) do
            if item.Name == obj.Name and item:IsA("BasePart") then
                table.insert(result.Templates, {
                    Path = item:GetFullName(),
                    Id = item:GetDebugId(),
                    Size = formatVector(item.Size),
                    Material = item.Material.Name
                })
            end
        end
    end

    return result
end

-- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
local function generateFullReport(data)
    local report = ""
    
    -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
    report ..= string.format("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ö–¢–ê [%s]\n", data.Basic.Name)
    report ..= string.format("üÜî ID: %s | –ö–ª–∞—Å—Å: %s\n", data.Basic.Id, data.Basic.Class)
    report ..= string.format("üìç –ü–æ–∑–∏—Ü–∏—è: %s\n", data.Basic.Position)
    report ..= string.format("üìè –†–∞–∑–º–µ—Ä: %s\n", data.Basic.Size)
    report ..= string.format("üè† –†–æ–¥–∏—Ç–µ–ª—å: %s\n\n", data.Basic.Parent)
    
    -- –°–µ–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    local sections = {
        {title = "üè∑Ô∏è –ê–¢–†–ò–ë–£–¢–´", data = data.Attributes, func = function(item)
            return string.format("- %s = %s (%s) [ID: %s]", 
                item.Name, item.Value, item.Type, item.Id)
        end},
        
        {title = "üî¢ –ó–ù–ê–ß–ï–ù–ò–Ø", data = data.Values, func = function(item)
            return string.format("- %s (%s) = %s [ID: %s]", 
                item.Name, item.Type, item.Value, item.Id)
        end},
        
        {title = "üìú –°–ö–†–ò–ü–¢–´", data = data.Scripts, func = function(item)
            return string.format("- %s (%s) %s [ID: %s]", 
                item.Name, item.Type, item.Disabled and "[DISABLED]" or "", item.Id)
        end},
        
        {title = "üåê –°–ï–¢–ï–í–´–ï –û–ë–™–ï–ö–¢–´", data = data.Network, func = function(item)
            return string.format("- %s (%s) [ID: %s]", 
                item.Name, item.Type, item.Id)
        end},
        
        {title = "‚öôÔ∏è –§–ò–ó–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´", data = data.Physics, func = function(item)
            return string.format("- %s (%s) [ID: %s]", 
                item.Name, item.Type, item.Id)
        end},
        
        {title = "üì¶ –®–ê–ë–õ–û–ù–´", data = data.Templates, func = function(item)
            return string.format("- %s\n   ID: %s | –†–∞–∑–º–µ—Ä: %s | –ú–∞—Ç–µ—Ä–∏–∞–ª: %s", 
                item.Path, item.Id, item.Size, item.Material)
        end}
    }
    
    -- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
    for _, section in ipairs(sections) do
        if #section.data > 0 then
            report ..= "\n" .. section.title .. ":\n"
            for _, item in ipairs(section.data) do
                report ..= section.func(item) .. "\n"
            end
        end
    end
    
    return report
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
local function completeAreaScan()
    local root = getPlayerRoot()
    local centerPos = root.Position
    
    -- –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
    local region = Region3.new(
        centerPos - Vector3.new(scanRadius, scanRadius, scanRadius),
        centerPos + Vector3.new(scanRadius, scanRadius, scanRadius)
    )
    
    -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ
    local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    local allObjects = {}
    local uniqueIds = {}
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –∏ –∏—Ö –ø–æ—Ç–æ–º–∫–æ–≤
    for _, part in ipairs(parts) do
        if not uniqueIds[part:GetDebugId()] then
            table.insert(allObjects, part)
            uniqueIds[part:GetDebugId()] = true
            
            for _, descendant in ipairs(part:GetDescendants()) do
                if not uniqueIds[descendant:GetDebugId()] then
                    table.insert(allObjects, descendant)
                    uniqueIds[descendant:GetDebugId()] = true
                end
            end
        end
    end
    
    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–µ—Å–ª–∏ —ç—Ç–æ BasePart)
    table.sort(allObjects, function(a, b)
        local aDist = a:IsA("BasePart") and (a.Position - centerPos).Magnitude or math.huge
        local bDist = b:IsA("BasePart") and (b.Position - centerPos).Magnitude or math.huge
        return aDist < bDist
    end)
    
    -- –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    local fullReport = string.format("üîç –ü–û–õ–ù–´–ô –°–ö–ê–ù –†–ê–î–ò–£–°–ê %d–º\n", scanRadius)
    fullReport ..= string.format("üìç –¶–µ–Ω—Ç—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %s\n\n", formatVector(centerPos))
    fullReport ..= string.format("–ù–ê–ô–î–ï–ù–û –û–ë–™–ï–ö–¢–û–í: %d\n", #allObjects)
    fullReport ..= string.rep("=", 60) .. "\n\n"
    
    for i, obj in ipairs(allObjects) do
        local dist = obj:IsA("BasePart") and string.format("%.2f–º", (obj.Position - centerPos).Magnitude) or "N/A"
        
        fullReport ..= string.format("‚û°Ô∏è –û–ë–™–ï–ö–¢ %d/%d\n", i, #allObjects)
        fullReport ..= string.rep("-", 30) .. "\n"
        fullReport ..= string.format("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", obj.Name)
        fullReport ..= string.format("–ö–ª–∞—Å—Å: %s\n", obj.ClassName)
        fullReport ..= string.format("ID: %s\n", obj:GetDebugId())
        fullReport ..= string.format("–î–∏—Å—Ç–∞–Ω—Ü–∏—è: %s\n", dist)
        
        -- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        local analysis = deepAnalyze(obj)
        fullReport ..= generateFullReport(analysis)
        
        fullReport ..= "\n" .. string.rep("=", 60) .. "\n\n"
    end
    
    print(fullReport)
    setclipboard(fullReport)
end

-- –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
completeAreaScan()
