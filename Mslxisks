local Players = game:GetService("Players")
local player = Players.LocalPlayer
local targetName = "Part" -- –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
local scanRadius = 10 -- –ú–µ—Ç—Ä—ã

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vector3
local function formatVector(vec)
    return string.format("(%.2f, %.2f, %.2f)", vec.X, vec.Y, vec.Z)
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π —á–∞—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
local function getPlayerRoot()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

-- –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞
local function analyzeObject(obj)
    local result = {
        Basic = {
            Name = obj.Name,
            Class = obj.ClassName,
            Id = obj:GetDebugId(),
            Position = formatVector(obj.Position),
            Size = formatVector(obj.Size),
            Color = string.format("(%.2f, %.2f, %.2f)", obj.Color.R, obj.Color.G, obj.Color.B),
            Material = obj.Material.Name,
            Transparency = obj.Transparency,
            Anchored = obj.Anchored,
            CanCollide = obj.CanCollide
        },
        Attributes = {},
        Values = {},
        Scripts = {},
        Physics = {},
        Templates = {}
    }

    -- –ê—Ç—Ä–∏–±—É—Ç—ã
    for attr, value in pairs(obj:GetAttributes()) do
        table.insert(result.Attributes, {
            Name = attr,
            Value = tostring(value),
            Type = typeof(value)
        })
    end

    -- Value-–æ–±—ä–µ–∫—Ç—ã
    for _, child in ipairs(obj:GetChildren()) do
        if child:IsA("ValueBase") then
            table.insert(result.Values, {
                Name = child.Name,
                Type = child.ClassName,
                Value = tostring(child.Value)
            })
        end
    end

    -- –°–∫—Ä–∏–ø—Ç—ã
    for _, script in ipairs(obj:GetDescendants()) do
        if script:IsA("Script") or script:IsA("LocalScript") then
            table.insert(result.Scripts, {
                Name = script.Name,
                Type = script.ClassName,
                Disabled = script.Disabled
            })
        end
    end

    -- –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if obj:FindFirstChildOfClass("TouchTransmitter") then
        table.insert(result.Physics, "TouchTransmitter")
    end
    if obj:FindFirstChildOfClass("ClickDetector") then
        table.insert(result.Physics, "ClickDetector")
    end

    -- –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
    local repStorage = game:GetService("ReplicatedStorage")
    for _, item in ipairs(repStorage:GetDescendants()) do
        if item.Name == obj.Name and item:IsA("BasePart") then
            table.insert(result.Templates, {
                Path = item:GetFullName(),
                Id = item:GetDebugId()
            })
        end
    end

    return result
end

-- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
local function generateReport(data)
    local report = ""
    
    -- –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    report ..= string.format("üîç –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞ [%s]\n", data.Basic.Name)
    report ..= string.format("üÜî ID: %s | –ö–ª–∞—Å—Å: %s\n", data.Basic.Id, data.Basic.Class)
    report ..= string.format("üìç –ü–æ–∑–∏—Ü–∏—è: %s\n", data.Basic.Position)
    report ..= string.format("üìè –†–∞–∑–º–µ—Ä: %s | –ú–∞—Ç–µ—Ä–∏–∞–ª: %s\n", data.Basic.Size, data.Basic.Material)
    report ..= string.format("üé® –¶–≤–µ—Ç: %s | –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: %.2f\n", data.Basic.Color, data.Basic.Transparency)
    report ..= string.format("üìå Anchored: %s | CanCollide: %s\n\n", 
        tostring(data.Basic.Anchored), tostring(data.Basic.CanCollide))
    
    -- –ê—Ç—Ä–∏–±—É—Ç—ã
    if #data.Attributes > 0 then
        report ..= "üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã:\n"
        for _, attr in ipairs(data.Attributes) do
            report ..= string.format("- %s = %s (%s)\n", attr.Name, attr.Value, attr.Type)
        end
    else
        report ..= "üè∑Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã: –ù–µ—Ç\n"
    end
    
    -- Value-–æ–±—ä–µ–∫—Ç—ã
    if #data.Values > 0 then
        report ..= "\nüî¢ –ó–Ω–∞—á–µ–Ω–∏—è:\n"
        for _, val in ipairs(data.Values) do
            report ..= string.format("- %s (%s) = %s\n", val.Name, val.Type, val.Value)
        end
    else
        report ..= "\nüî¢ –ó–Ω–∞—á–µ–Ω–∏—è: –ù–µ—Ç\n"
    end
    
    -- –°–∫—Ä–∏–ø—Ç—ã
    if #data.Scripts > 0 then
        report ..= "\nüìú –°–∫—Ä–∏–ø—Ç—ã:\n"
        for _, script in ipairs(data.Scripts) do
            report ..= string.format("- %s (%s) %s\n", 
                script.Name, script.Type, script.Disabled and "[Disabled]" or "")
        end
    else
        report ..= "\nüìú –°–∫—Ä–∏–ø—Ç—ã: –ù–µ—Ç\n"
    end
    
    -- –§–∏–∑–∏–∫–∞
    if #data.Physics > 0 then
        report ..= "\nüñ±Ô∏è –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n"
        for _, phys in ipairs(data.Physics) do
            report ..= string.format("- %s\n", phys)
        end
    else
        report ..= "\nüñ±Ô∏è –§–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: –ù–µ—Ç\n"
    end
    
    -- –®–∞–±–ª–æ–Ω—ã
    if #data.Templates > 0 then
        report ..= "\nüì¶ –®–∞–±–ª–æ–Ω—ã:\n"
        for _, template in ipairs(data.Templates) do
            report ..= string.format("- %s (ID: %s)\n", template.Path, template.Id)
        end
    else
        report ..= "\nüì¶ –®–∞–±–ª–æ–Ω—ã: –ù–µ—Ç\n"
    end
    
    return report
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function runAnalysis()
    local root = getPlayerRoot()
    local region = Region3.new(
        root.Position - Vector3.new(scanRadius, scanRadius, scanRadius),
        root.Position + Vector3.new(scanRadius, scanRadius, scanRadius)
    )
    local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
    
    local found = false
    for _, part in ipairs(parts) do
        if part.Name == targetName then
            local data = analyzeObject(part)
            local report = generateReport(data)
            
            print(report)
            setclipboard(report)
            found = true
        end
    end
    
    if not found then
        print("‚ùå –û–±—ä–µ–∫—Ç—ã '"..targetName.."' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ "..scanRadius.."–º")
    end
end

-- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runAnalysis()
