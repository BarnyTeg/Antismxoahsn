local targetName = "Part" -- –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
local repStorage = game:GetService("ReplicatedStorage")

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
local function analyzeTemplates()
    local templates = {}
    
    for _, item in ipairs(repStorage:GetDescendants()) do
        if item.Name == targetName and item:IsA("BasePart") then
            table.insert(templates, {
                Path = item:GetFullName(),
                Id = item:GetDebugId() -- –†–µ–∞–ª—å–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞
            })
        end
    end
    
    return templates
end

-- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
local function formatTemplateReport(templates)
    local report = string.format(
        "üì¶ –®–∞–±–ª–æ–Ω—ã '%s' –≤ ReplicatedStorage (%d):\n\n",
        targetName,
        #templates
    )
    
    for i, template in ipairs(templates) do
        report ..= string.format(
            "%d. %s\n   üÜî ID: %s\n\n",
            i,
            template.Path,
            template.Id
        )
    end
    
    return report
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function runTemplateAnalysis()
    local templates = analyzeTemplates()
    
    if #templates == 0 then
        print("‚ùå –®–∞–±–ª–æ–Ω—ã '"..targetName.."' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ReplicatedStorage")
        return
    end
    
    local report = formatTemplateReport(templates)
    print(report)
    setclipboard(report)
end

-- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
runTemplateAnalysis()
