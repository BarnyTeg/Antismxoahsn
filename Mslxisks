local Players = game:GetService("Players")
local player = Players.LocalPlayer
local scanRadius = 10 -- –ú–µ—Ç—Ä—ã

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vector3
local function formatVector(vec)
    return string.format("(%.2f, %.2f, %.2f)", vec.X, vec.Y, vec.Z)
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π —á–∞—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
local function getPlayerRoot()
    local character = player.Character or player.CharacterAdded:Wait()
    return character:WaitForChild("HumanoidRootPart")
end

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞
local function isVisible(obj)
    if obj:IsA("BasePart") then
        return obj.Transparency < 1 and obj:IsDescendantOf(workspace)
    end
    return true
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
local function fullAreaScan()
    local root = getPlayerRoot()
    local centerPos = root.Position
    
    -- –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
    local region = Region3.new(
        centerPos - Vector3.new(scanRadius, scanRadius, scanRadius),
        centerPos + Vector3.new(scanRadius, scanRadius, scanRadius)
    )
    
    -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ
    local parts = workspace:FindPartsInRegion3(region, nil, math.huge)
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    local allObjects = {}
    local uniqueIds = {}
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    for _, part in ipairs(parts) do
        if not uniqueIds[part:GetDebugId()] and isVisible(part) then
            table.insert(allObjects, part)
            uniqueIds[part:GetDebugId()] = true
        end
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
    for _, part in ipairs(parts) do
        for _, descendant in ipairs(part:GetDescendants()) do
            if not uniqueIds[descendant:GetDebugId()] and isVisible(descendant) then
                table.insert(allObjects, descendant)
                uniqueIds[descendant:GetDebugId()] = true
            end
        end
    end
    
    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    table.sort(allObjects, function(a, b)
        local distA = (a:IsA("BasePart") and (a.Position - centerPos).Magnitude or math.huge)
        local distB = (b:IsA("BasePart") and (b.Position - centerPos).Magnitude or math.huge)
        return distA < distB
    end)
    
    -- –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    local report = string.format("üîç –ü–û–õ–ù–´–ô –°–ö–ê–ù –†–ê–î–ò–£–°–ê %d–º\n", scanRadius)
    report ..= string.format("üìç –¶–µ–Ω—Ç—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %s\n\n", formatVector(centerPos))
    report ..= "–ù–ê–ô–î–ï–ù–ù–´–ï –û–ë–™–ï–ö–¢–´:\n"
    report ..= string.rep("-", 50) .. "\n"
    
    for i, obj in ipairs(allObjects) do
        local dist = obj:IsA("BasePart") and string.format("%.2f–º", (obj.Position - centerPos).Magnitude) or "N/A"
        local size = obj:IsA("BasePart") and formatVector(obj.Size) or "N/A"
        
        report ..= string.format("%d. %s (%s)\n", i, obj.Name, obj.ClassName)
        report ..= string.format("   üÜî ID: %s\n", obj:GetDebugId())
        report ..= string.format("   üìç –ü–æ–∑–∏—Ü–∏—è: %s\n", obj:IsA("BasePart") and formatVector(obj.Position) or "N/A")
        report ..= string.format("   üìè –†–∞–∑–º–µ—Ä: %s\n", size)
        report ..= string.format("   üìê –î–∏—Å—Ç–∞–Ω—Ü–∏—è: %s\n", dist)
        report ..= string.format("   üè† –†–æ–¥–∏—Ç–µ–ª—å: %s\n", obj.Parent and obj.Parent.Name or "nil")
        report ..= string.rep("-", 50) .. "\n"
    end
    
    report ..= string.format("\n–ò–¢–û–ì–û: %d –æ–±—ä–µ–∫—Ç–æ–≤", #allObjects)
    
    print(report)
    setclipboard(report)
end

-- –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
fullAreaScan()
